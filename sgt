// Credits to HealthyUG for the inspiration.
// Segment Tree with Point Updates and Range Queries
// Supports multiple Segment Trees with just a change in the Node and Update
// Very few changes required everytime
import java.util.*;

class SegTree<NodeType extends Node, UpdateType extends Update> {
    NodeType[] tree;
    long[] arr; // type may change
    int n;
    int s;
    
    @SuppressWarnings("unchecked")
    SegTree(int a_len, long[] a, Class<NodeType> nodeClass) { // change if type updated
        arr = a.clone();
        n = a_len;
        s = 1;
        while(s < 2 * n){
            s = s << 1;
        }
        tree = (NodeType[]) new Node[s];
        for(int i = 0; i < s; i++) {
            try {
                tree[i] = nodeClass.getDeclaredConstructor().newInstance();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
        build(0, n - 1, 1);
    }
    
    void build(int start, int end, int index)  // Never change this
    {
        if (start == end)    {
            tree[index] = (NodeType) new Node1(arr[start]);
            return;
        }
        int mid = (start + end) / 2;
        build(start, mid, 2 * index);
        build(mid + 1, end, 2 * index + 1);
        tree[index].merge(tree[2 * index], tree[2 * index + 1]);
    }
    
    void update(int start, int end, int index, int query_index, UpdateType u)  // Never Change this
    {
        if (start == end) {
            u.apply(tree[index]);
            return;
        }
        int mid = (start + end) / 2;
        if (mid >= query_index)
            update(start, mid, 2 * index, query_index, u);
        else
            update(mid + 1, end, 2 * index + 1, query_index, u);
        tree[index].merge(tree[2 * index], tree[2 * index + 1]);
    }
    
    @SuppressWarnings("unchecked")
    NodeType query(int start, int end, int index, int left, int right) { // Never change this
        if (start > right || end < left)
            return (NodeType) new Node1();
        if (start >= left && end <= right)
            return tree[index];
        int mid = (start + end) / 2;
        NodeType l, r, ans;
        l = query(start, mid, 2 * index, left, right);
        r = query(mid + 1, end, 2 * index + 1, left, right);
        ans = (NodeType) new Node1();
        ans.merge(l, r);
        return ans;
    }
    
    void make_update(int index, long val) {  // pass in as many parameters as required
        UpdateType new_update = (UpdateType) new Update1(val); // may change
        update(0, n - 1, 1, index, new_update);
    }
    
    NodeType make_query(int left, int right) {
        return query(0, n - 1, 1, left, right);
    }
}

abstract class Node {
    abstract void merge(Node l, Node r);
}

abstract class Update {
    abstract void apply(Node a);
}

class Node1 extends Node {
    long val; // may change
    Node1() { // Identity element
        val = 0;    // may change
    }
    Node1(long p1) {  // Actual Node
        val = p1; // may change
    }
    void merge(Node l, Node r) { // Merge two child nodes
        val = ((Node1)l).val ^ ((Node1)r).val;  // may change
    }
}

class Update1 extends Update {
    long val; // may change
    Update1(long p1) { // Actual Update
        val = p1; // may change
    }
    void apply(Node a) { // apply update to given node
        ((Node1)a).val = val; // may change
    }
}
